{
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 6
  },
  "rules": {
    // https://eslint.org/docs/rules/
    /* Possible Errors
       These rules relate to possible syntax or logic errors in JavaScript code. */
    "for-direction": "error", // enforce “for” loop update clause moving the counter in the right direction.
    "getter-return": "error", // enforce return statements in getters
    "no-async-promise-executor": "error", // disallow using an async function as a Promise executor
    "no-await-in-loop": "error", // disallow await inside of loops
    "no-compare-neg-zero": "error", // disallow comparing against -0
    "no-cond-assign": ["error", "except-parens"], // disallow assignment operators in conditional expressions
    "no-console": "error", // disallow the use of console
    "no-constant-condition": "error", // disallow constant expressions in conditions
    "no-control-regex": "error", // disallow control characters in regular expressions
    "no-debugger": "error", // disallow the use of debugger
    "no-dupe-args": "error", // disallow duplicate arguments in function definitions
    "no-dupe-keys": "error", // disallow duplicate keys in object literals
    "no-duplicate-case": "error", // disallow duplicate case labels
    "no-empty": "error", // disallow empty block statements
    "no-empty-character-class": "error", // disallow empty character classes in regular expressions
    "no-ex-assign": "error", // disallow reassigning exceptions in catch clauses
    "no-extra-boolean-cast": "error", // disallow unnecessary boolean casts
    "no-extra-parens": [ // disallow unnecessary parentheses
      "error",
      "functions",
    ],
    "no-extra-semi": "error", // disallow unnecessary semicolons
    "no-func-assign": "error", // disallow reassigning function declarations
    "no-inner-declarations": "error", // disallow variable or function declarations in nested blocks
    "no-invalid-regexp": "error", // disallow invalid regular expression strings in RegExp constructors
    "no-irregular-whitespace": "error", // disallow irregular whitespace outside of strings and comments
    "no-misleading-character-class": "error", // disallow characters which are made with multiple code points in character class syntax
    "no-obj-calls": "error", // disallow calling global object properties as functions
    "no-prototype-builtins": "error", // disallow calling some Object.prototype methods directly on objects
    "no-regex-spaces": "error", // disallow multiple spaces in regular expressions
    "no-sparse-arrays": "error", // disallow sparse arrays
    "no-template-curly-in-string": "error", // disallow template literal placeholder syntax in regular strings
    "no-unexpected-multiline": "error", // disallow confusing multiline expressions
    "no-unreachable": "error", // disallow unreachable code after return, throw, continue, and break statements
    "no-unsafe-finally": "error", // disallow control flow statements in finally blocks
    "no-unsafe-negation": "error", // disallow negating the left operand of relational operators
    "require-atomic-updates": "error", // disallow assignments that can lead to race conditions due to usage of await or yield
    "use-isnan": "error", // require calls to isNaN() when checking for NaN
    "valid-typeof": "error", // enforce comparing typeof expressions against valid strings
    /* Best Practices
       These rules relate to better ways of doing things to help you avoid problems: */
    "accessor-pairs": "error", // enforce getter and setter pairs in objects
    "array-callback-return": "error", // enforce return statements in callbacks of array methods
    "block-scoped-var": "error", // enforce the use of variables within the scope they are defined
    "class-methods-use-this": "error", // enforce that class methods utilize this
    "complexity": "error", // enforce a maximum cyclomatic complexity allowed in a program
    "consistent-return": "error", // require return statements to either always or never specify values
    "curly": ["error", "multi-line", "consistent"], // enforce consistent brace style for all control statements
    "default-case": "error", // require default cases in switch statements
    "dot-location": ["error", "property"], // enforce consistent newlines before and after dots
    "dot-notation": "error", // enforce dot notation whenever possible
    "eqeqeq": "error", // require the use of === and !==
    "guard-for-in": "error", // require for-in loops to include an if statement
    "max-classes-per-file": "error", // enforce a maximum number of classes per file
    "no-alert": "error", // disallow the use of alert, confirm, and prompt
    "no-caller": "error", // disallow the use of arguments.caller or arguments.callee
    "no-case-declarations": "error", // disallow lexical declarations in case clauses
    "no-div-regex": "error", // disallow division operators explicitly at the beginning of regular expressions
    "no-else-return": "error", // disallow else blocks after return statements in if statements
    "no-empty-function": "error", // disallow empty functions
    "no-empty-pattern": "error", // disallow empty destructuring patterns
    "no-eq-null": "error", // disallow null comparisons without type-checking operators
    "no-eval": "error", // disallow the use of eval()
    "no-extend-native": "error", // disallow extending native types
    "no-extra-bind": "error", // disallow unnecessary calls to .bind()
    "no-extra-label": "error", // disallow unnecessary labels
    "no-fallthrough": "error", // disallow fallthrough of case statements
    "no-floating-decimal": "error", // disallow leading or trailing decimal points in numeric literals
    "no-global-assign": "error", // disallow assignments to native objects or read-only global variables
    "no-implicit-coercion": "error", // disallow shorthand type conversions
    "no-implicit-globals": "error", // disallow variable and function declarations in the global scope
    "no-implied-eval": "error", // disallow the use of eval()-like methods
    "no-invalid-this": "error", // disallow this keywords outside of classes or class-like objects
    "no-iterator": "error", // disallow the use of the __iterator__ property
    "no-labels": "error", // disallow labeled statements
    "no-lone-blocks": "error", // disallow unnecessary nested blocks
    "no-loop-func": "error", // disallow function declarations and expressions inside loop statements
    "no-magic-numbers": "off", // disallow magic numbers
    "no-multi-spaces": "error", // disallow multiple spaces
    "no-multi-str": "error", // disallow multiline strings
    "no-new": "error", // disallow new operators outside of assignments or comparisons
    "no-new-func": "error", // disallow new operators with the Function object
    "no-new-wrappers": "error", // disallow new operators with the String, Number, and Boolean objects
    "no-octal": "error", // disallow octal literals
    "no-octal-escape": "error", // disallow octal escape sequences in string literals
    "no-param-reassign": "error", // disallow reassigning function parameters
    "no-proto": "error", // disallow the use of the __proto__ property
    "no-redeclare": "error", // disallow variable redeclaration
    "no-restricted-properties": "error", // disallow certain properties on certain objects
    "no-return-assign": "error", // disallow assignment operators in return statements
    "no-return-await": "error", // disallow unnecessary return await
    "no-script-url": "error", // disallow javascript: urls
    "no-self-assign": "error", // disallow assignments where both sides are exactly the same
    "no-self-compare": "error", // disallow comparisons where both sides are exactly the same
    "no-sequences": "error", // disallow comma operators
    "no-throw-literal": "error", // disallow throwing literals as exceptions
    "no-unmodified-loop-condition": "error", // disallow unmodified loop conditions
    "no-unused-expressions": "error", // disallow unused expressions
    "no-unused-labels": "error", // disallow unused labels
    "no-useless-call": "error", // disallow unnecessary calls to .call() and .apply()
    "no-useless-concat": "error", // disallow unnecessary concatenation of literals or template literals
    "no-useless-escape": "error", // disallow unnecessary escape characters
    "no-useless-return": "error", // disallow redundant return statements
    "no-void": "error", // disallow void operators
    "no-warning-comments": "error", // disallow specified warning terms in comments
    "no-with": "error", // disallow with statements
    "prefer-promise-reject-errors": "error", // require using Error objects as Promise rejection reasons
    "radix": "error", // enforce the consistent use of the radix argument when using parseInt()
    "require-await": "error", // disallow async functions which have no await expression
    "require-unicode-regexp": "off", // enforce the use of u flag on RegExp
    "vars-on-top": "error", // require var declarations be placed at the top of their containing scope
    "wrap-iife": "error", // require parentheses around immediate function invocations
    "yoda": "error", // require or disallow “Yoda” conditions
    /* Strict Mode
       These rules relate to strict mode directives: */
    "strict": "error", // require or disallow strict mode directives
    /* Variables
       These rules relate to variable declarations: */
    "init-declarations": "off", // require or disallow initialization in variable declarations
    "no-delete-var": "error", // disallow deleting variables
    "no-label-var": "error", // disallow labels that share a name with a variable
    "no-restricted-globals": "error", // disallow specified global variables
    "no-shadow": "error", // disallow variable declarations from shadowing variables declared in the outer scope
    "no-shadow-restricted-names": "error", // disallow identifiers from shadowing restricted names
    "no-undef": "error", // disallow the use of undeclared variables unless mentioned in /*global */ comments
    "no-undef-init": "error", // disallow initializing variables to undefined
    "no-undefined": "error", // disallow the use of undefined as an identifier
    "no-unused-vars": "error", // disallow unused variables
    "no-use-before-define": "error", // disallow the use of variables before they are defined
    /* Node.js and CommonJS
       These rules relate to code running in Node.js, or in browsers with CommonJS: */
    "callback-return": "error", // require return statements after callbacks
    "global-require": "error", // require require() calls to be placed at top-level module scope
    "handle-callback-err": "error", // require error handling in callbacks
    "no-buffer-constructor": "error", // disallow use of the Buffer() constructor
    "no-mixed-requires": "error", // disallow require calls to be mixed with regular variable declarations
    "no-new-require": "error", // disallow new operators with calls to require
    "no-path-concat": "error", // disallow string concatenation with __dirname and __filename
    "no-process-env": "error", // disallow the use of process.env
    "no-process-exit": "error", // disallow the use of process.exit()
    "no-restricted-modules": "error", // disallow specified modules when loaded by require
    "no-sync": "error", // disallow synchronous methods
    /* Stylistic Issues
       These rules relate to style guidelines, and are therefore quite subjective: */
    "array-bracket-newline": "error", // enforce linebreaks after opening and before closing array brackets
    "array-bracket-spacing": "error", // enforce consistent spacing inside array brackets
    "array-element-newline": ["error", "consistent"], // enforce line breaks after each array element
    "block-spacing": "error", // disallow or enforce spaces inside of blocks after opening block and before closing block
    "brace-style": "error", // enforce consistent brace style for blocks
    "camelcase": "error", // enforce camelcase naming convention
    "capitalized-comments": "off", // enforce o // disallow capitalization of the first letter of a comment
    "comma-dangle": ["error", "only-multiline"], // require or disallow trailing commas
    "comma-spacing": "error", // enforce consistent spacing before and after commas
    "comma-style": "error", // enforce consistent comma style
    "computed-property-spacing": "error", // enforce consistent spacing inside computed property brackets
    "consistent-this": "off", // enforce consistent naming when capturing the current execution context
    "eol-last": "error", // require or disallow newline at the end of files
    "func-call-spacing": "error", // require or disallow spacing between function identifiers and their invocations
    "func-name-matching": "error", // require function names to match the name of the variable or property to which they are assigned
    "func-names": "error", // require or disallow named function expressions
    "func-style": "error", // enforce the consistent use of either function declarations or expressions
    "function-paren-newline": "error", // enforce consistent line breaks inside function parentheses
    "id-blacklist": "error", // disallow specified identifiers
    "id-length": "off", // enforce minimum and maximum identifier lengths
    "id-match": "error", // require identifiers to match a specified regular expression
    "implicit-arrow-linebreak": "error", // enforce the location of arrow function bodies
    "indent": ["error", 2], // enforce consistent indentation
    "jsx-quotes": "error", // enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": "error", // enforce consistent spacing between keys and values in object literal properties
    "keyword-spacing": "error", // enforce consistent spacing before and after keywords
    "line-comment-position": "off", // enforce position of line comments
    "linebreak-style": "error", // enforce consistent linebreak style
    "lines-around-comment": "error", // require empty lines around comments
    "lines-between-class-members": "error", // require or disallow an empty line between class members
    "max-depth": "off", // enforce a maximum depth that blocks can be nested
    "max-len": [ // enforce a maximum line length
      "error",
      {
        "code": 80
      }
    ],
    "max-lines": "off", // enforce a maximum number of lines per file
    "max-lines-per-function": "off", // enforce a maximum number of line of code in a function
    "max-nested-callbacks": "off", // enforce a maximum depth that callbacks can be nested
    "max-params": "off", // enforce a maximum number of parameters in function definitions
    "max-statements": "off", // enforce a maximum number of statements allowed in function blocks
    "max-statements-per-line": "off", // enforce a maximum number of statements allowed per line
    "multiline-comment-style": "off", // enforce a particular style for multiline comments
    "multiline-ternary": ["error", "always-multiline"], // enforce newlines between operands of ternary expressions
    "new-cap": "error", // require constructor names to begin with a capital letter
    "new-parens": "error", // require parentheses when invoking a constructor with no arguments
    "newline-per-chained-call": "error", // require a newline after each call in a method chain
    "no-array-constructor": "error", // disallow Array constructors
    "no-bitwise": "error", // disallow bitwise operators
    "no-continue": "off", // disallow continue statements
    "no-inline-comments": "off", // disallow inline comments after code
    "no-lonely-if": "error", // disallow if statements as the only statement in else blocks
    "no-mixed-operators": "off", // disallow mixed binary operators
    "no-mixed-spaces-and-tabs": "error", // disallow mixed spaces and tabs for indentation
    "no-multi-assign": "error", // disallow use of chained assignment expressions
    "no-multiple-empty-lines": "error", // disallow multiple empty lines
    "no-negated-condition": "error", // disallow negated conditions
    "no-nested-ternary": "error", // disallow nested ternary expressions
    "no-new-object": "error", // disallow Object constructors
    "no-plusplus": "off", // disallow the unary operators ++ and --
    "no-restricted-syntax": "error", // disallow specified syntax
    "no-tabs": "error", // disallow all tabs
    "no-ternary": "off", // disallow ternary operators
    "no-trailing-spaces": "error", // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": "error", // disallow dangling underscores in identifiers
    "no-unneeded-ternary": "error", // disallow ternary operators when simpler alternatives exist
    "no-whitespace-before-property": "error", // disallow whitespace before properties
    "nonblock-statement-body-position": "error", // enforce the location of single-line statements
    "object-curly-newline": "error", // enforce consistent line breaks inside braces
    "object-curly-spacing": ["error", "always"], // enforce consistent spacing inside braces
    "object-property-newline": [ // enforce placing object properties on separate lines
      "error",
      {
        "allowAllPropertiesOnSameLine": true
      }
    ],
    "one-var": ["error", "never"], // enforce variables to be declared either together or separately in functions
    "one-var-declaration-per-line": "error", // require or disallow newlines around variable declarations
    "operator-assignment": "error", // require or disallow assignment operator shorthand where possible
    "operator-linebreak": ["error", "before"], // enforce consistent linebreak style for operators
    "padded-blocks": ["error", "never"], // require or disallow padding within blocks
    "padding-line-between-statements": "error", // require or disallow padding lines between statements
    "prefer-object-spread": "error", // disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.
    "quote-props": ["error", "as-needed"], // require quotes around object literal property names
    "quotes": ["error", "single"], // enforce the consistent use of either backticks, double, or single quotes
    "semi": ["error", "always"], // require or disallow semicolons instead of ASI
    "semi-spacing": "error", // enforce consistent spacing before and after semicolons
    "semi-style": "error", // enforce location of semicolons
    "sort-keys": [ // require object keys to be sorted
      "error",
      "asc",
      {
        "caseSensitive": false,
        "natural": true
      }
    ],
    "sort-vars": [ // require variables within the same declaration block to be sorted
      "error",
      {
        "ignoreCase": true
      }
    ],
    "space-before-blocks": "error", // enforce consistent spacing before blocks
    "space-before-function-paren": ["error", "never"], // enforce consistent spacing before function definition opening parenthesis
    "space-in-parens": "error", // enforce consistent spacing inside parentheses
    "space-infix-ops": "error", // require spacing around infix operators
    "space-unary-ops": "error", // enforce consistent spacing before or after unary operators
    "spaced-comment": "error", // enforce consistent spacing after the // or /* in a comment
    "switch-colon-spacing": "error", // enforce spacing around colons of switch statements
    "template-tag-spacing": "error", // require or disallow spacing between template tags and their literals
    "unicode-bom": "error", // require or disallow Unicode byte order mark (BOM)
    "wrap-regex": "off", // require parenthesis around regex literals
    /* ECMAScript 6
       These rules relate to ES6, also known as ES"error"015: */
    "arrow-body-style": "error", // require braces around arrow function bodies
    "arrow-parens": ["error", "as-needed"], // require parentheses around arrow function arguments
    "arrow-spacing": "error", // enforce consistent spacing before and after the arrow in arrow functions
    "constructor-super": "error", // require super() calls in constructors
    "generator-star-spacing": "error", // enforce consistent spacing around * operators in generator functions
    "no-class-assign": "error", // disallow reassigning class members
    "no-confusing-arrow": [ // disallow arrow functions where they could be confused with comparisons
      "error",
      {
        "allowParens": true
      }
    ],
    "no-const-assign": "error", // disallow reassigning const variables
    "no-dupe-class-members": "error", // disallow duplicate class members
    "no-duplicate-imports": "error", // disallow duplicate module imports
    "no-new-symbol": "error", // disallow new operators with the Symbol object
    "no-restricted-imports": "error", // disallow specified modules when loaded by import
    "no-this-before-super": "error", // disallow this/super before calling super() in constructors
    "no-useless-computed-key": "error", // disallow unnecessary computed property keys in object literals
    "no-useless-constructor": "error", // disallow unnecessary constructors
    "no-useless-rename": "error", // disallow renaming import, export, and destructured assignments to the same name
    "no-var": "error", // require let or const instead of var
    "object-shorthand": "error", // require or disallow method and property shorthand syntax for object literals
    "prefer-arrow-callback": "error", // require using arrow functions for callbacks
    "prefer-const": "error", // require const declarations for variables that are never reassigned after declared
    "prefer-destructuring": "error", // require destructuring from arrays and/or objects
    "prefer-numeric-literals": "error", // disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
    "prefer-rest-params": "error", // require rest parameters instead of arguments
    "prefer-spread": "error", // require spread operators instead of .apply()
    "prefer-template": "error", // require template literals instead of string concatenation
    "require-yield": "error", // require generator functions to contain yield
    "rest-spread-spacing": "error", // enforce spacing between rest and spread operators and their expressions
    "sort-imports": [ // enforce sorted import declarations within modules
      "error",
      {
        "ignoreCase": true,
        "memberSyntaxSortOrder": ["all", "single", "multiple", "none"]
      }
    ],
    "symbol-description": "error", // require symbol descriptions
    "template-curly-spacing": "error", // require or disallow spacing around embedded expressions of template strings
    "yield-star-spacing": "error", // require or disallow spacing around the * in yield* expressions
  }
}
